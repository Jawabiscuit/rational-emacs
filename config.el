;; -*- lexical-binding: t -*-
;;; `config.el' --- Summary: My rational-emacs config
;;; Commentary: This file is automatically generated from org-mode
;;; Code:

(require 'rational-defaults)
;; (require 'rational-screencast)
(require 'rational-ui)
(require 'rational-editing)
;; (require 'rational-evil)
(require 'rational-completion)
(require 'rational-windows)
(require 'rational-use-package)
(require 'rational-updates)

(setq rational-updates-mode 1)

(require 'system-const)

(setq straight-use-package-by-default t)
(setq use-package-compute-statistics t)

;; Who am I?
(setq user-full-name "Jonas Avrin")
(if sys/bss-hostname-p
    (setq user-login-name "jonasavrin"
          user-mail-address "jonasavrin@blueskystudios.com")
  (setq user-login-name "jonas"
        user-mail-address "jawabiscuit@users.noreply.github.com"))

(setq visible-bell 1)

(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)

(setq electric-indent-mode nil)

(setq create-lockfiles nil)

(blink-cursor-mode -1)

(prefer-coding-system 'utf-8)
(set-language-environment 'utf-8)
(set-default-coding-systems 'utf-8)
(set-buffer-file-coding-system 'utf-8)
(set-clipboard-coding-system 'utf-8)
(set-file-name-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(modify-coding-system-alist 'process "*" 'utf-8)

(setq locale-coding-system 'utf-8
      default-process-coding-system '(utf-8 . utf-8)
      default-buffer-file-coding-system 'utf-8-unix)

(delete-selection-mode 1)

(setq fill-column 90)

;; Set in rational emacs
;; (recentf-mode 1)
(setq recentf-max-saved-items 100)

(setq history-length 1000)

(setq undo-limit 20000000
      undo-strong-limit 40000000)

(set-face-attribute 'default nil
                  :font "JetBrains Mono"
                  :weight 'light
                  :height 125)

(load-theme 'doom-dracula t)

(setq org-confirm-babel-evaluate nil)

(defun duplicate-line()
  (interactive)
  (move-beginning-of-line 1)
  (kill-line)
  (yank)
  (open-line 1)
  (next-line 1)
  (yank)
)
(global-set-key (kbd "C-d") 'duplicate-line)

;; ====================
;; insert date and time


;; 2021-11-07 08:16:41 -0500
(defvar current-date-time-org-settings-format "%Y-%m-%d %H:%M:%S %z"
  "Format of date to insert into settings blocks at the beginning of org files
See help of `format-time-string' for possible replacements")

;; Tue Feb 01 08:12:17 Eastern Standard Time 2022
(defvar current-date-time-long-format "%a %b %d %H:%M:%S %Z %Y"
  "Format of date to insert into files where formal formatting is preferred
See help of `format-time-string' for possible replacements")

;; 2022-02-01 Tue 08:12
(defvar current-date-time-format "%Y-%m-%d %a %H:%M"
  "Format of date to insert with `insert-current-date-time' func
See help of `format-time-string' for possible replacements")

;; Tue 08:13:14
(defvar current-time-format "%a %H:%M:%S"
  "Format of date to insert with `insert-current-time' func.
See help of `format-time-string' for possible replacements")

;; 2022-02-01
(defvar current-date-ymd-format "%Y-%m-%d"
  "Format of date to insert with `insert-current-date' func.
See help of `format-time-string' for possible replacements")

(defun insert-current-date ()
  "Insert the current date into current buffer.
Uses `current-date-time-format' for the formatting the date/time."
       (interactive)
       (insert (format-time-string current-date-ymd-format (current-time))))

(defun insert-current-date-time ()
  "Insert the current date and time into current buffer.
Uses `current-date-time-format' for the formatting the date/time."
       (interactive)
       (insert (format-time-string current-date-time-format (current-time))))

(defun insert-current-time ()
  "Insert the current time (1-week scope) into the current buffer."
       (interactive)
       (insert (format-time-string current-time-format (current-time))))

(global-set-key "\C-c\C-d" 'insert-current-date-time)
(global-set-key "\C-c\C-t" 'insert-current-time)

(use-package hungry-delete
  :straight (hungry-delete :type git :flavor melpa :host github :repo "nflath/hungry-delete")
  ;; :config (global-hungry-delete-mode)
  :bind ("C-M-<backspace>" . hungry-delete-backward)
)

(defcustom jawa/no-littering-use-my-etc-library t
  "Whether to use my configuration file library in ~/.config/emacs-etc as `no-littering-etc-directory'.")

(use-package no-littering
  :init
  (when jawa/no-littering-use-my-etc-library
    (let ((dir "~/.config/emacs-etc"))
      (when (or (file-directory-p dir)
                (and (yes-or-no-p "~/.config/emacs-etc does not exist. Clone it from GitHub?")
                     (= 0 (call-process-shell-command
                           (format "git clone %s %s"
                                   "https://github.com/Jawabiscuit/emacs-config-library.git"
                                   (shell-quote-argument (expand-file-name dir)))
                           nil nil nil))))
        (setq no-littering-etc-directory dir))))
  :config
  ;; Autosave and custom.el settings
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
  (if jawa/no-littering-use-my-etc-library
      (setq custom-file
            (no-littering-expand-etc-file-name "custom.el"))
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory)))

  ;; Load custom.el
  (load custom-file))

(use-package yasnippet
  :diminish yas-minor-mode
)

(use-package yasnippet-snippets
  :straight (yasnippet-snippets :host github :repo "Jawabiscuit/yasnippet-snippets")
  :after yasnippet
  :init
  ;; By default, the snippets in this package are loaded at package
  ;; initialization.
  ;;
  ;; This is annoying since the snippets override my own snippets
  ;; when they conflict.
  ;;
  ;; To prevent this issue, I replace `yasnippet-snippets-initialize'
  ;; with an alternative version that doesn't load the snippets.
  ;;
  ;; Instead, I call `yas-reload-all' after this package is loaded.
  ;; This works as expected since this package is loaded after
  ;; `yasnippet' package.
  (defun jawa/yasnippet-snippets-initialize-no-reload ()
    "Add the directory but don't reload the snippets."
    (add-to-list 'yas-snippet-dirs 'yasnippet-snippets-dir t))
  (advice-add 'yasnippet-snippets-initialize
              :override
              'jawa/yasnippet-snippets-initialize-no-reload)
  :hook ((org-mode python-mode elisp-mode) . yas-minor-mode)
  :config
  ;; Load all snippets. You need to make sure that all snippet
  ;; directories are added beforehand.
  (yas-reload-all))

(use-package tempel
  :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
         ("M-*" . tempel-insert))
  :init
  ;; Setup completion at point
  (defun tempel-setup-capf ()
    ;; Add the Tempel Capf to `completion-at-point-functions'. `tempel-expand'
    ;; only triggers on exact matches. Alternatively use `tempel-complete' if
    ;; you want to see all matches, but then Tempel will probably trigger too
    ;; often when you don't expect it.
    ;; NOTE: We add `tempel-expand' *before* the main programming mode Capf,
    ;; such that it will be tried first.
    (setq-local completion-at-point-functions
                (cons #'tempel-expand
                      completion-at-point-functions)))

  (add-hook 'prog-mode-hook 'tempel-setup-capf)
  (add-hook 'text-mode-hook 'tempel-setup-capf)

  ;; Optionally make the Tempel templates available to Abbrev,
  ;; either locally or globally. `expand-abbrev' is bound to C-x '.
  ;; (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
  ;; (tempel-global-abbrev-mode)
)

(define-key minibuffer-mode-map (kbd "M-<backspace>") 'rational-completion/minibuffer-backward-kill)

(use-package corfu
  ;; Optional customizations
  :custom
  ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion (useful in prog-mode buffers)
  ;; (corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect-first nil)    ;; Disable candidate preselection
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  ;; You may want to enable Corfu only for certain modes.
  ;; :hook ((prog-mode . corfu-mode)
  ;;        (shell-mode . corfu-mode)
  ;;        (eshell-mode . corfu-mode))

  ;; Recommended: Enable Corfu globally.
  ;; This is recommended since dabbrev can be used globally (M-/).
  :init
  (corfu-global-mode))

(use-package cape
  ;; Bind dedicated completion commands
  :bind (("C-c p p" . completion-at-point) ;; capf
         ("C-c p t" . complete-tag)        ;; etags
         ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
         ("C-c p f" . cape-file)
         ("C-c p k" . cape-keyword)
         ("C-c p s" . cape-symbol)
         ("C-c p a" . cape-abbrev)
         ;("C-c p i" . cape-ispell)
         ("C-c p l" . cape-line)
         ;("C-c p w" . cape-dict)
         ;("C-c p \\" . cape-tex)
         ;("C-c p _" . cape-tex)
         ;("C-c p ^" . cape-tex)
         ;("C-c p &" . cape-sgml)
         ("C-c p r" . cape-rfc1345)        ;; type &, then the keybinding
  )
  :init
  ;; Add `completion-at-point-functions', used by `completion-at-point'.
  (add-to-list 'completion-at-point-functions #'cape-file)
  ;(add-to-list 'completion-at-point-functions #'cape-tex)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  ;(add-to-list 'completion-at-point-functions #'cape-keyword)
  ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
  ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
  ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
  ;;(add-to-list 'completion-at-point-functions #'cape-dict)
  ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
  ;;(add-to-list 'completion-at-point-functions #'cape-line)
)

(use-package tab-bookmark
    :straight (tab-bookmark :host github :repo "minad/tab-bookmark")
)

(use-package rg
  :straight (rg :type git :flavor melpa :host github :repo "dajva/rg.el")
  :config
  (rg-use-old-defaults)
  (rg-enable-menu)
)

(use-package which-key
  :straight (which-key :type git :flavor melpa :host github :repo "justbur/emacs-which-key")
  :diminish which-key-mode
  :init
  (which-key-mode)
  :config
  ;; Display the window at the bottom
  (which-key-setup-side-window-bottom)
  (defmacro jawa/which-key-add-stripped-prefix (prefix)
    "Add PREFIX as a stripped prefix to `which-key-replacement-alist'."
    `(add-to-list 'which-key-replacement-alist
                  (quote ((nil . ,prefix) .
                          (lambda (kb)
                            (cons (car kb)
                                  (string-remove-prefix ,prefix (cdr kb))))))))
)

(defcustom jawa/mc-prefix-key "C-c m"
  "Configure the prefix key for `jawa/mc' bindings.")

(define-prefix-command 'jawa/mc-keymap)
(global-set-key (kbd jawa/mc-prefix-key) 'jawa/mc-keymap)

;; Strips the `jawa/' namespace from the which-key entry
(jawa/which-key-add-stripped-prefix "jawa/")

(use-package multiple-cursors
  :hook ((prog-mode text-mode) . multiple-cursors-mode)
  :bind (("C-S-<mouse-1>" . mc/add-cursor-on-click)

         :map jawa/mc-keymap
         ("C-c"   . mc/edit-lines)
         ("C-a"   . mc/edit-beginnings-of-lines)
         ("C-e"   . mc/edit-endings-of-lines)

         ("C-w"   . mc/mark-all-dwim)
         ("C-S-w" . mc/mark-all-in-region)
         ("x"     . mc/mark-all-in-region-regexp)
         ("C-p"   . mc/mark-previous-like-this)
         ("C-n"   . mc/mark-next-like-this)
         ("C-x"   . mc/mark-more-like-this-extended)

         ("#"     . mc/insert-numbers)
         ("~"     . mc/sort-regions)
         ("<"     . mc/reverse-regions)

         ("C-h"   . mc-hide-unmatched-lines-mode)
         ("C-v"   . mc/cycle-forward)
         ("C-S-v" . mc/cycle-backward)
         ("p"     . mc/skip-to-previous-like-this)
         ("n"     . mc/skip-to-next-like-this)

         ;; Binding under mc-extras doesn't seem to work
         ("M-n"   . mc/mark-next-sexps)
         ("M-p"   . mc/mark-previous-sexps)
         ("C-S-p" . mc/mark-all-above)
         ("C-S-n" . mc/mark-all-below)

         ("d"     . mc/remove-duplicated-cursors)
         ("C-d"   . mc/remove-current-cursors)
         ("C-l"   . mc/remove-cursors-on-blank-lines)

         :map mc/keymap
         ("<return>" . nil))
)

(use-package mc-extras
  :after multiple-cursors
  :straight (mc-extras :host github :repo "knu/mc-extras.el")
)

(use-package cmake-mode
  :straight (
    cmake-mode
    :type git
    :flavor melpa
    :files ("Auxiliary/*.el" "cmake-mode-pkg.el")
    :repo "https://gitlab.kitware.com/cmake/cmake.git")
)

(use-package cmake-font-lock
  :straight (cmake-font-lock
      :type git
      :flavor melpa
      :host github
      :repo "Lindydancer/cmake-font-lock")
)

(use-package markdown-mode
  :straight (markdown-mode :type git :flavor melpa :host github :repo "jrblevin/markdown-mode")
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown")
)

(use-package magit
  :straight (magit
      :type git
      :flavor melpa
      :files ("lisp/magit"
              "lisp/magit*.el"
              "lisp/git-rebase.el"
              "docs/magit.texi"
              "docs/AUTHORS.md"
              "LICENSE"
             (:exclude "lisp/magit-libgit.el"
                       "lisp/magit-libgit-pkg.el"
                       "lisp/magit-section.el"
                       "lisp/magit-section-pkg.el")
              "Documentation/magit.texi"
              "Documentation/AUTHORS.md"
              "magit-pkg.el")
      :host github
      :repo "magit/magit")
  :commands magit-status
  :bind (("C-x m" . magit-status-fullscreen)
         ("C-x g" . magit-status))
  :config
  (set-default 'magit-push-always-verify nil)
  (set-default 'magit-revert-buffers 'silent)
  (set-default 'magit-no-confirm '(stage-all-changes unstage-all-changes))
  (set-default 'magit-diff-refine-hunk t)

  (defun jawa/magit-cursor-fix ()
  "Move cursor into position when entering a commit message."
  (goto-char (point-min))
  (when (looking-at "#")
    (forward-line 2)))

  (defun vc-annotate-quit ()
    "Restore the previous window configuration and kill the `vc-annotate' buffer."
    (interactive)
    (kill-buffer)
    (jump-to-register :vc-annotate-fullscreen))

  (defvar vc-annotate-mode-map)
  (eval-after-load "vc-annotate"
    '(progn
       (defadvice vc-annotate (around fullscreen activate)
         (window-configuration-to-register :vc-annotate-fullscreen)
         ad-do-it
         (delete-other-windows))
       (define-key vc-annotate-mode-map (kbd "q") 'vc-annotate-quit)))

  (defun magit-status-fullscreen (prefix)
    "Full screen magit-status.
  Unless PREFIX, delete other windows"
    (interactive "P")
    (magit-status-setup-buffer)
    (unless prefix
      (delete-other-windows)))

  (autoload 'magit-status-fullscreen "magit")
)
